name: (AWS EC2 Instance) Backup Directory

on:
  workflow_call:
    inputs:
      environment:
        required: true
        type: string
      actor:
        required: true
        type: string
      backup_remote_directory:
        required: true
        type: string
      backup_s3_directory:
        required: true
        type: string
    secrets:
      AWS_ACCESS_KEY_ID:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true
      AWS_REGION:
        required: true
      AWS_EC2_SECURITY_GROUP_ID:
        required: true
      AWS_EC2_SSH_PRIVATE_KEY:
        required: true
      AWS_EC2_SSH_USERNAME:
        required: true
      AWS_EC2_SSH_HOSTNAME:
        required: true
      SENTRY_DSN:
        required: true

env:
  APP_ENV: production
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_REGION: ${{ secrets.AWS_REGION }}
  AWS_EC2_SECURITY_GROUP_ID: ${{ secrets.AWS_EC2_SECURITY_GROUP_ID }}
  AWS_EC2_SECURITY_GROUP_RULE_DESCRIPTION: ${{ inputs.actor }}
  AWS_EC2_SECURITY_GROUP_RULE_PORT: 22
  AWS_EC2_SECURITY_GROUP_RULE_PROTOCOL: tcp
  AWS_S3_BACKUP_BUCKET_NAME: ${{ vars.AWS_S3_BACKUP_BUCKET_NAME }}
  BACKUP_DOWNLOAD_DIRECTORY: .
  BACKUP_REMOTE_DIRECTORY: ${{ inputs.backup_remote_directory }}
  BACKUP_S3_DIRECTORY: ${{ inputs.backup_s3_directory }}
  SENTRY_DSN: ${{ secrets.SENTRY_DSN }}
  WORKFLOW_ENVIRONMENT: ${{ inputs.environment }}

jobs:
  backup:
    environment:
      name: ${{ inputs.environment }}
    name: ${{ inputs.environment }}
    runs-on: ubuntu-22.04
    steps:
      - name: Fetching runner's IP
        id: runner-ip
        uses: haythem/public-ip@v1.3
      - name: Pushing runner's IP to ENV
        run: echo "AWS_EC2_SECURITY_GROUP_RULE_IP_ADDRESS=${{ steps.runner-ip.outputs.ipv4 }}" >> $GITHUB_ENV
      - name: Pushing backup file name to ENV
        run: echo "BACKUP_FILE_NAME=backup-$(date +'%Y-%m-%d').zip" >> $GITHUB_ENV
      - name: Checking-out remote scripts
        uses: actions/checkout@v4
        with:
          repository: oshopgiri/ops_bot
          ref: main
      - name: Setting-up Ruby
        uses: ruby/setup-ruby@v1
        with:
          bundler-cache: true
      - name: Whitelisting runner's IP
        run: ruby ./bin/aws/ec2/security_group/whitelist_ip.rb
      - name: Creating backup on remote client
        uses: appleboy/ssh-action@v1.0.3
        env:
          BACKUP_FILE_NAME: ${{ env.BACKUP_FILE_NAME }}
          BACKUP_REMOTE_DIRECTORY: ${{ env.BACKUP_REMOTE_DIRECTORY }}
        with:
          host: ${{ secrets.AWS_EC2_SSH_HOSTNAME }}
          username: ${{ secrets.AWS_EC2_SSH_USERNAME }}
          key: ${{ secrets.AWS_EC2_SSH_PRIVATE_KEY }}
          envs: BACKUP_FILE_NAME,BACKUP_REMOTE_DIRECTORY
          timeout: 60s
          script: |
            sudo zip -qr $BACKUP_FILE_NAME $BACKUP_REMOTE_DIRECTORY
      - name: Downloading backup from remote client
        uses: nicklasfrahm/scp-action@v1.0.1
        with:
          direction: download
          host: ${{ secrets.AWS_EC2_SSH_HOSTNAME }}
          username: ${{ secrets.AWS_EC2_SSH_USERNAME }}
          key: ${{ secrets.AWS_EC2_SSH_PRIVATE_KEY }}
          insecure_ignore_fingerprint: true
          source: ~/${{ env.BACKUP_FILE_NAME }}
          target: ${{ env.BACKUP_DOWNLOAD_DIRECTORY }}/${{ env.BACKUP_FILE_NAME }}
      - name: Uploading backup to S3
        run: ruby ./bin/backup/upload.rb
      - name: Deleting backup from remote client
        uses: appleboy/ssh-action@v1.0.3
        env:
          BACKUP_FILE_NAME: ${{ env.BACKUP_FILE_NAME }}
        with:
          host: ${{ secrets.AWS_EC2_SSH_HOSTNAME }}
          username: ${{ secrets.AWS_EC2_SSH_USERNAME }}
          key: ${{ secrets.AWS_EC2_SSH_PRIVATE_KEY }}
          envs: BACKUP_FILE_NAME
          timeout: 60s
          script: |
            sudo rm -f $BACKUP_FILE_NAME
